RPC-Multithreading Executive Summary
                                                        -By Swati Garg and Surabhi Agrawal




Overview:
        This project is an extension of our first project which was a single client - single server key-value store program. In this project, we extended the previous project in two ways:
1) We have used RPC (Remote Procedure Call) for transmitting messages between client and server, instead of lower level protocols such as TCP/UDP.
2) We have changed it from single server-single client to a single server-multiple client. As such the server and the backing datastore needed to be multithreaded and able to handle concurrency. This necessitates the use of mutual exclusion for get and delete calls.

Technical Impression:
	The use of RMI instead of direct sockets over TCP/UDP makes the implementation of server and client much more simpler and straightforward . We created an interface KVStore which extends the Remote class of the RMI library on the server side. Then we added a class KVStoreImpl which implements the KVStore interface. Now we created an RMI registry, bound an instance of KVStoreImpl to it, and exported the object. The client looks by the registry on a specific hostname and gets the stub to the remote object via a named lookup. 
In TCP/UDP implementation, we had to create a specific protocol, handle serializing and deserializing the java objects over the protocol, handle sending and receiving messages in buffers, and the relevant error handling. In case of RMI, the RMI implementation handled all these via stubs, enabling us to concentrate on providing the actual Key Value store functionality.
        We implemented multithreading by using a concurrent hash map. The concurrent hash map provides a concurrent and thread safe access to its put, get and remove functions. It does not provide locking for get function. For delete and get, we checked for the existence of the key and would throw an exception in case the key is not found. This added functionality required the KVStoreImpl’s Delete and Get functions to be synchronized to allow multithreaded access. As such, if a client is putting a value into the table, another client cannot get or delete at the same time. 
	We have incorporated client and server side logging. The client side logging mostly involved handling exceptions. We used the java logging library to log the errors in a file. The server side was more complicated. We wanted to log all the calls to the server as well as any error messages that were passed back to the client. We used the transport level logging of RMI for this purpose and routed the log to a log file.
	Initially running the RMI server and client was a bit challenging. The server and client could fail to communicate for a variety of reasons. For example, the hostname of the RMI server wasn’t set, or the server machine wasn’t allowing external commotion, or the class path of the server or the client was off, etc. The error message reported were very generic and debugging through them to identify the issue was challenging.
        We did not use the RMI’s SecurityManager (System.setSecurityManager(new RMISecurityManager())) when implementing the program. The security manager is needed when the RMI class loader needs to load the class definition from remote location. Since our server and client are in the same codebase, the client don’t need to download any remote class definition. As such, the security manager wasn’t needed, and the class definitions were loaded from local CLASSPATH.
